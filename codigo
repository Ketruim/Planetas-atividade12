import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

void main() {
  runApp(MyApp());
}

class DatabaseHelper {
  static final _databaseName = "planets.db";
  static final _databaseVersion = 1;

  static final table = 'planet_table';
  static final columnId = '_id';
  static final columnName = 'name';
  static final columnDescription = 'description';

  // Singleton pattern
  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;

    _database = await _initDatabase();
    return _database!;
  }

  _initDatabase() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = '${documentsDirectory.path}$_databaseName';
    return await openDatabase(path, version: _databaseVersion, onCreate: _onCreate);
  }

  Future _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE $table (
        $columnId INTEGER PRIMARY KEY,
        $columnName TEXT NOT NULL,
        $columnDescription TEXT NOT NULL
      )
    ''');
  }

  Future<int> insert(Map<String, dynamic> row) async {
    Database db = await database;
    return await db.insert(table, row);
  }

  Future<List<Map<String, dynamic>>> queryAll() async {
    Database db = await database;
    return await db.query(table);
  }

  Future<int> update(Map<String, dynamic> row) async {
    Database db = await database;
    int id = row[columnId];
    return await db.update(table, row, where: '$columnId = ?', whereArgs: [id]);
  }

  Future<int> delete(int id) async {
    Database db = await database;
    return await db.delete(table, where: '$columnId = ?', whereArgs: [id]);
  }
}

class PlanetScreen extends StatefulWidget {
  @override
  _PlanetScreenState createState() => _PlanetScreenState();
}

class _PlanetScreenState extends State<PlanetScreen> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  List<Map<String, dynamic>> _planetList = [];

  @override
  void initState() {
    super.initState();
    _loadPlanets();
  }

  _loadPlanets() async {
    var planets = await DatabaseHelper.instance.queryAll();
    setState(() {
      _planetList = planets;
    });
  }

  _addPlanet() async {
    String name = _nameController.text;
    String description = _descriptionController.text;

    if (name.isNotEmpty && description.isNotEmpty) {
      var planet = {
        'name': name,
        'description': description,
      };

      await DatabaseHelper.instance.insert(planet);
      _loadPlanets();
      _nameController.clear();
      _descriptionController.clear();
    }
  }

  _editPlanet(int id) async {
    String name = _nameController.text;
    String description = _descriptionController.text;

    if (name.isNotEmpty && description.isNotEmpty) {
      var planet = {
        'id': id,
        'name': name,
        'description': description,
      };

      await DatabaseHelper.instance.update(planet);
      _loadPlanets();
      _nameController.clear();
      _descriptionController.clear();
    }
  }

  _deletePlanet(int id) async {
    await DatabaseHelper.instance.delete(id);
    _loadPlanets();
  }

  _showPlanetDialog([int? id]) {
    if (id != null) {
      var planet = _planetList.firstWhere((p) => p['_id'] == id);
      _nameController.text = planet['name'];
      _descriptionController.text = planet['description'];
    }

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(id == null ? 'Add Planet' : 'Edit Planet'),
          content: Column(
            children: [
              TextField(
                controller: _nameController,
                decoration: InputDecoration(labelText: 'Name'),
              ),
              TextField(
                controller: _descriptionController,
                decoration: InputDecoration(labelText: 'Description'),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                if (id == null) {
                  _addPlanet();
                } else {
                  _editPlanet(id);
                }
                Navigator.pop(context);
              },
              child: Text(id == null ? 'Add' : 'Save'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Planet Manager')),
      body: ListView.builder(
        itemCount: _planetList.length,
        itemBuilder: (context, index) {
          var planet = _planetList[index];
          return ListTile(
            title: Text(planet['name']),
            subtitle: Text(planet['description']),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton(
                  icon: Icon(Icons.edit),
                  onPressed: () {
                    _showPlanetDialog(planet['_id']);
                  },
                ),
                IconButton(
                  icon: Icon(Icons.delete),
                  onPressed: () {
                    _deletePlanet(planet['_id']);
                  },
                ),
              ],
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _showPlanetDialog();
        },
        child: Icon(Icons.add),
      ),
    );
  }
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Planet Manager',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PlanetScreen(),
    );
  }
}
